# Generated by Django 5.1.6 on 2025-02-12 11:08

import django.contrib.auth.models
import django.contrib.auth.validators
import uuid
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='CustomUser',
            fields=[
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('full_name', models.CharField(max_length=255, verbose_name="To'liq ismi")),
                ('phone_number', models.CharField(max_length=20, unique=True, verbose_name='Telefon raqami')),
                ('email', models.EmailField(max_length=254, unique=True, verbose_name='Email')),
                ('birth_date', models.DateField(blank=True, null=True, verbose_name="Tug'ilgan sana")),
                ('gender', models.CharField(choices=[('male', 'Erkak'), ('female', 'Ayol')], max_length=10, verbose_name='Jinsi')),
                ('institute', models.CharField(blank=True, max_length=255, null=True, verbose_name='Institut nomi')),
                ('department', models.CharField(blank=True, max_length=255, null=True, verbose_name="Bo'lim")),
                ('position', models.CharField(blank=True, max_length=255, null=True, verbose_name='Lavozim')),
                ('face_image', models.ImageField(blank=True, null=True, upload_to='faces/', verbose_name='Foydalanuvchi rasmi')),
                ('face_encoding', models.JSONField(blank=True, null=True, verbose_name="Yuz kodlash ma'lumotlari")),
                ('face_landmarks', models.JSONField(blank=True, null=True, verbose_name='Yuz landmarks')),
                ('emotion', models.CharField(blank=True, max_length=50, null=True, verbose_name='Hissiy holat')),
                ('is_teacher', models.BooleanField(default=False, verbose_name="O'qituvchi")),
                ('is_student', models.BooleanField(default=False, verbose_name='Talaba')),
                ('is_admin', models.BooleanField(default=False, verbose_name='Admin')),
                ('date_joined', models.DateTimeField(auto_now_add=True, verbose_name="Ro'yxatdan o'tgan sana")),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Yangilangan sana')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
    ]
